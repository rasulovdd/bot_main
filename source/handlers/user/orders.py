from loguru import logger
from aiogram import types
from source.middlewares import rate_limit
from source.api import onec
import source.database.db as db
from source.keyboard import reply, inline
import json
from time import sleep
import time
from source.utils import is_int
from loader import bot

@rate_limit(limit=1)
async def orders_list(message: types.Message):
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥—ã
    user_id = message.from_user.id
    user_status = db.get_status(user_id)
    if user_status == 1 or user_status == 2:
        if message.text == "–ú–æ–∏ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥—ã":
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å 1–° –∏ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑=–Ω–∞—Ä—è–¥–æ–≤
            status, result = onec.LastOrders(user_id)
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å 2 (—Ä–∞–±–æ—Ç–∞ —Å –ó–ù)  
            db.set_status(user_id, 2)
            await message.answer("–í–∞—à–∏ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥—ã:", reply_markup=await reply.remove_kb())
            if status == 200:
                try:
                    data = json.loads(result)
                except ValueError as my_error:
                    logger.error(f"[-] –ú–æ–∏ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥—ã. –û—à–∏–±–∫–∞: {my_error}")
                    await message.answer(
                        user_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ù–∞–∂–º–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞")
                    return
                # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ json
                for order in data["orders"]:
                    # –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥–æ–≤
                    order_data = order['docdate']
                    order_data_text = order_data.split("T")
                    my_text = (
                        f"üìë –ó–∞–∫–∞–∑ ‚Ññ: {order['docnumber']}\n"
                        f"üóì –î–∞—Ç–∞: {order_data_text[0]} {order_data_text[1]}\n"
                        #f"üóì –î–∞—Ç–∞: {order['docdate']}\n"
                        f"üöò VIN: <tg-spoiler>{order['vin']}</tg-spoiler>\n"
                        f"‚öôÔ∏è –ù–æ–º–µ—Ä: {order['regn']}\n"
                        f"üë§ –ö–ª–∏–µ–Ω—Ç: {order['name']}"
                    )
                    await message.answer(my_text, parse_mode="HTML", reply_markup=await inline.order_list(order['guid']))
                    # –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ –±–∞–Ω –ª–∏—Å—Ç
                    sleep(0.05)
            else:
                await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫(")
        
        elif is_int(message.text):
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å 1–° –∏ –ø–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥
            status, result = onec.Order(user_id, message.text)  
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å 2 (—Ä–∞–±–æ—Ç–∞ —Å –ó–ù) 
            db.set_status(user_id, 2)    
            if status == 200:
                try:
                    data = json.loads(result)
                except ValueError as my_error:
                    logger.error(f"[-] –ó–∞–∫–∞–∑-–Ω–∞—Ä—è–¥. –û—à–∏–±–∫–∞: {my_error}")
                    await message.answer(
                        user_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ù–∞–∂–º–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞")
                    return
                # –≤—ã–≤–æ–¥–∏–º –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥
                order_data = data['docdate']
                order_data_text = order_data.split("T")
                my_text = (
                    f"üìë –ó–∞–∫–∞–∑ ‚Ññ: {data['docnumber']}\n"
                    f"üóì –î–∞—Ç–∞: {order_data_text[0]} {order_data_text[1]}\n"
                    f"üöò VIN: <tg-spoiler>{data['vin']}</tg-spoiler>\n"
                    f"‚öôÔ∏è –ù–æ–º–µ—Ä: {data['regn']}\n"
                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {data['name']}"
                )
                await message.answer(my_text, parse_mode="HTML", reply_markup=await inline.order_list(data['guid']))
                
            else:
                await message.answer("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥–∞ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –≤—Å–µ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É /start")

        else:
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ú–æ–∏ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥—ã</b>", 
                parse_mode="HTML", reply_markup=await reply.list_orders_kb())
    
    elif user_status == 0:
        await message.answer("–Ø –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é(.\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üëá –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–∞–≤ –ú–µ–Ω—é->Start")

    # elif user_status == 2: # —Ä–∞–±–æ—Ç–∞ —Å –∑–∞–∫–∞–∑ –Ω–∞—Ä—è–¥–æ–º
    #     if is_int(message.text):
    #         # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å 1–° –∏ –ø–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥
    #         status, result = onec.Order(user_id, message.text)      
    #         if status == 200:
    #             try:
    #                 data = json.loads(result)
    #             except ValueError as my_error:
    #                 logger.error(f"[-] –ó–∞–∫–∞–∑-–Ω–∞—Ä—è–¥. –û—à–∏–±–∫–∞: {my_error}")
    #                 await message.answer(
    #                     user_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ù–∞–∂–º–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞")
    #                 return
    #             # –≤—ã–≤–æ–¥–∏–º –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥
    #             order_data = data['docdate']
    #             order_data_text = order_data.split("T")
    #             my_text = (
    #                 f"üìë –ó–∞–∫–∞–∑ ‚Ññ: {data['docnumber']}\n"
    #                 f"üóì –î–∞—Ç–∞: {order_data_text[0]} {order_data_text[1]}\n"
    #                 f"üöò VIN: <tg-spoiler>{data['vin']}</tg-spoiler>\n"
    #                 f"‚öôÔ∏è –ù–æ–º–µ—Ä: {data['regn']}\n"
    #                 f"üë§ –ö–ª–∏–µ–Ω—Ç: {data['name']}"
    #             )
    #             await message.answer(my_text, parse_mode="HTML", reply_markup=await inline.order_list(data['guid']))
                    
    #         else:
    #             await message.answer("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥–∞ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –≤—Å–µ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É /start")

    #     else:
    #         await message.answer(
    #             "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ú–æ–∏ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥—ã</b>", 
    #             parse_mode="HTML", reply_markup=await reply.list_orders_kb())
    
    elif user_status == 3: #–ø—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ  
        # —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è 
        # await message.delete()
        await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ")

    elif user_status == 4: #–∂–¥–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Ç –≤ 1
        # –ø–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–º–ø –±–∞–∑—ã
        file_info = db.get_file_info(user_id)
        #—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å 5
        db.set_status(user_id, 5)
        await bot.edit_message_text("–§–∞–π–ª –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∫ –∑–∞–≥—Ä—É–∑–∫–µ –≤ 1–°!\n"
                                "‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ", user_id, file_info[4], reply_markup=None)
        # –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ 1–°
        status, result, my_json = onec.Content(user_id, message.text, file_info)
        if status == 200:
            logger.success(f"[+] User ID: {user_id}. –û—Ç–ø—Ä–∞–≤–∏–ª –¥–∞–Ω–Ω—ã–µ. {file_info}")
            await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ!\n–•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ?", 
                                 reply_markup=await inline.yes_no(file_info[0],file_info[4]))
            # # —É–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ –±–∞–∑—ã
            # db.set_file_info(user_id,"","","")
            # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ 
            db.del_order_guid(user_id)
            #—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å 3 
            db.set_status(user_id, 3)
        elif status == 404:
            await message.answer("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            logger.error(f"[-] User ID: {user_id}. –ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–∞–Ω–Ω—ã–µ. {file_info}")
        elif status == 500:
            await message.answer("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ù–∞–∂–º–∏—Ç–µ /start –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞")
            logger.error(f"[-] User ID: {user_id}. –û—à–∏–±–∫–∞. [{result.reason}]. –î–∞–Ω–Ω—ã–µ [{my_json}]")

    elif user_status == 5: #–ø—Ä–æ—Å–∏–º –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–µ–∂–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        # —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è 
        # await message.delete()
        await message.answer("–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É!")

@rate_limit(limit=1)
async def select_order(call: types.CallbackQuery):
    user_id = call.from_user.id
    order_guid = call.data.split('_')[1]
    # –ë–æ—Ç –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç (—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ) –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥
    db.set_status(user_id, 3) #—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å 3
    # —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –í—ã–±—Ä–∞—Ç—å
    await call.message.edit_reply_markup(reply_markup=await inline.selected_order())
    logger.info(f"[ ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id} –≤—ã–±—Ä–∞–ª –ó–ù. guid: {order_guid}")
    # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ
    await call.message.answer("–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=await inline.upload_content(order_guid, call.message.message_id))

@rate_limit(limit=1)
async def select_upload(call: types.CallbackQuery):
    user_id = call.from_user.id
    order_guid = call.data.split('_')[1]
    message_id = call.data.split('_')[2]
    #print (order_guid)
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º user_id –∏ orders_guid –≤ –±–∞–∑—É –±–æ—Ç–∞
    db.set_order_guid(user_id, order_guid, call.message.message_id)
    # –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç 
    await call.message.edit_text("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ", reply_markup=await inline.upload_cancel(message_id))

@rate_limit(limit=1)
async def selected_order(call: types.CallbackQuery):
    await bot.answer_callback_query(call.id, text='–ó–∞–∫–∞–∑-–Ω–∞—Ä—è–¥ —É–∂–µ –≤—ã–±—Ä–∞–Ω')
    
@rate_limit(limit=1)
async def cancel_order(call: types.CallbackQuery):
    user_id = call.from_user.id
    logger.info(f"[ ] –í—ã–±–æ—Ä –ó–ù –æ—Ç–º–µ–Ω–µ–Ω.")
    message_id = call.data.split("_")[1]
    await call.message.edit_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=None)
    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å 1
    db.set_status(user_id, 1) # —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –∑–Ω
    # —É–¥–∞–ª—è–µ–º tmp –¥–∞–Ω–Ω—ã–µ 
    db.del_order_guid(user_id)
    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ 
    try:
        await bot.delete_message(user_id, message_id)
        logger.success(f"[ ] –°–æ–æ–±—â–µ–Ω–∏–µ id: {message_id} —É–¥–∞–ª–µ–Ω–æ.")
    except:
        logger.error(f"[-] –°–æ–æ–±—â–µ–Ω–∏–µ id. {message_id} –Ω–µ —Å—É—â–µ–π—Å—Ç–≤—É–µ—Ç.")